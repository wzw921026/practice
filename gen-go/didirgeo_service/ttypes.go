// Autogenerated by Thrift Compiler (0.9.2)
// DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING

package didirgeo_service

import (
	"bytes"
	"fmt"
	"git.apache.org/thrift.git/lib/go/thrift"
)

// (needed to ensure safety because of naive import list construction.)
var _ = thrift.ZERO
var _ = fmt.Printf
var _ = bytes.Equal

var GoUnusedProtection__ int

type ResultType int64

const (
	ResultType_FENCE ResultType = 1
	ResultType_LINES ResultType = 2
)

func (p ResultType) String() string {
	switch p {
	case ResultType_FENCE:
		return "ResultType_FENCE"
	case ResultType_LINES:
		return "ResultType_LINES"
	}
	return "<UNSET>"
}

func ResultTypeFromString(s string) (ResultType, error) {
	switch s {
	case "ResultType_FENCE":
		return ResultType_FENCE, nil
	case "ResultType_LINES":
		return ResultType_LINES, nil
	}
	return ResultType(0), fmt.Errorf("not a valid ResultType string")
}

func ResultTypePtr(v ResultType) *ResultType { return &v }

type LocationInfoRequest struct {
	UserName  string  `thrift:"user_name,1,required" json:"user_name"`
	Token     string  `thrift:"token,2,required" json:"token"`
	Productid string  `thrift:"productid,3,required" json:"productid"`
	Lng       float64 `thrift:"lng,4,required" json:"lng"`
	Lat       float64 `thrift:"lat,5,required" json:"lat"`
	Radius    *int32  `thrift:"radius,6" json:"radius"`
	MaxNum    *int32  `thrift:"max_num,7" json:"max_num"`
	Traceid   *string `thrift:"traceid,8" json:"traceid"`
}

func NewLocationInfoRequest() *LocationInfoRequest {
	return &LocationInfoRequest{}
}

func (p *LocationInfoRequest) GetUserName() string {
	return p.UserName
}

func (p *LocationInfoRequest) GetToken() string {
	return p.Token
}

func (p *LocationInfoRequest) GetProductid() string {
	return p.Productid
}

func (p *LocationInfoRequest) GetLng() float64 {
	return p.Lng
}

func (p *LocationInfoRequest) GetLat() float64 {
	return p.Lat
}

var LocationInfoRequest_Radius_DEFAULT int32

func (p *LocationInfoRequest) GetRadius() int32 {
	if !p.IsSetRadius() {
		return LocationInfoRequest_Radius_DEFAULT
	}
	return *p.Radius
}

var LocationInfoRequest_MaxNum_DEFAULT int32

func (p *LocationInfoRequest) GetMaxNum() int32 {
	if !p.IsSetMaxNum() {
		return LocationInfoRequest_MaxNum_DEFAULT
	}
	return *p.MaxNum
}

var LocationInfoRequest_Traceid_DEFAULT string

func (p *LocationInfoRequest) GetTraceid() string {
	if !p.IsSetTraceid() {
		return LocationInfoRequest_Traceid_DEFAULT
	}
	return *p.Traceid
}
func (p *LocationInfoRequest) IsSetRadius() bool {
	return p.Radius != nil
}

func (p *LocationInfoRequest) IsSetMaxNum() bool {
	return p.MaxNum != nil
}

func (p *LocationInfoRequest) IsSetTraceid() bool {
	return p.Traceid != nil
}

func (p *LocationInfoRequest) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return fmt.Errorf("%T read error: %s", p, err)
	}
	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return fmt.Errorf("%T field %d read error: %s", p, fieldId, err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if err := p.ReadField1(iprot); err != nil {
				return err
			}
		case 2:
			if err := p.ReadField2(iprot); err != nil {
				return err
			}
		case 3:
			if err := p.ReadField3(iprot); err != nil {
				return err
			}
		case 4:
			if err := p.ReadField4(iprot); err != nil {
				return err
			}
		case 5:
			if err := p.ReadField5(iprot); err != nil {
				return err
			}
		case 6:
			if err := p.ReadField6(iprot); err != nil {
				return err
			}
		case 7:
			if err := p.ReadField7(iprot); err != nil {
				return err
			}
		case 8:
			if err := p.ReadField8(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return fmt.Errorf("%T read struct end error: %s", p, err)
	}
	return nil
}

func (p *LocationInfoRequest) ReadField1(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return fmt.Errorf("error reading field 1: %s", err)
	} else {
		p.UserName = v
	}
	return nil
}

func (p *LocationInfoRequest) ReadField2(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return fmt.Errorf("error reading field 2: %s", err)
	} else {
		p.Token = v
	}
	return nil
}

func (p *LocationInfoRequest) ReadField3(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return fmt.Errorf("error reading field 3: %s", err)
	} else {
		p.Productid = v
	}
	return nil
}

func (p *LocationInfoRequest) ReadField4(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadDouble(); err != nil {
		return fmt.Errorf("error reading field 4: %s", err)
	} else {
		p.Lng = v
	}
	return nil
}

func (p *LocationInfoRequest) ReadField5(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadDouble(); err != nil {
		return fmt.Errorf("error reading field 5: %s", err)
	} else {
		p.Lat = v
	}
	return nil
}

func (p *LocationInfoRequest) ReadField6(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI32(); err != nil {
		return fmt.Errorf("error reading field 6: %s", err)
	} else {
		p.Radius = &v
	}
	return nil
}

func (p *LocationInfoRequest) ReadField7(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI32(); err != nil {
		return fmt.Errorf("error reading field 7: %s", err)
	} else {
		p.MaxNum = &v
	}
	return nil
}

func (p *LocationInfoRequest) ReadField8(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return fmt.Errorf("error reading field 8: %s", err)
	} else {
		p.Traceid = &v
	}
	return nil
}

func (p *LocationInfoRequest) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("LocationInfoRequest"); err != nil {
		return fmt.Errorf("%T write struct begin error: %s", p, err)
	}
	if err := p.writeField1(oprot); err != nil {
		return err
	}
	if err := p.writeField2(oprot); err != nil {
		return err
	}
	if err := p.writeField3(oprot); err != nil {
		return err
	}
	if err := p.writeField4(oprot); err != nil {
		return err
	}
	if err := p.writeField5(oprot); err != nil {
		return err
	}
	if err := p.writeField6(oprot); err != nil {
		return err
	}
	if err := p.writeField7(oprot); err != nil {
		return err
	}
	if err := p.writeField8(oprot); err != nil {
		return err
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return fmt.Errorf("write field stop error: %s", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return fmt.Errorf("write struct stop error: %s", err)
	}
	return nil
}

func (p *LocationInfoRequest) writeField1(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("user_name", thrift.STRING, 1); err != nil {
		return fmt.Errorf("%T write field begin error 1:user_name: %s", p, err)
	}
	if err := oprot.WriteString(string(p.UserName)); err != nil {
		return fmt.Errorf("%T.user_name (1) field write error: %s", p, err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return fmt.Errorf("%T write field end error 1:user_name: %s", p, err)
	}
	return err
}

func (p *LocationInfoRequest) writeField2(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("token", thrift.STRING, 2); err != nil {
		return fmt.Errorf("%T write field begin error 2:token: %s", p, err)
	}
	if err := oprot.WriteString(string(p.Token)); err != nil {
		return fmt.Errorf("%T.token (2) field write error: %s", p, err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return fmt.Errorf("%T write field end error 2:token: %s", p, err)
	}
	return err
}

func (p *LocationInfoRequest) writeField3(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("productid", thrift.STRING, 3); err != nil {
		return fmt.Errorf("%T write field begin error 3:productid: %s", p, err)
	}
	if err := oprot.WriteString(string(p.Productid)); err != nil {
		return fmt.Errorf("%T.productid (3) field write error: %s", p, err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return fmt.Errorf("%T write field end error 3:productid: %s", p, err)
	}
	return err
}

func (p *LocationInfoRequest) writeField4(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("lng", thrift.DOUBLE, 4); err != nil {
		return fmt.Errorf("%T write field begin error 4:lng: %s", p, err)
	}
	if err := oprot.WriteDouble(float64(p.Lng)); err != nil {
		return fmt.Errorf("%T.lng (4) field write error: %s", p, err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return fmt.Errorf("%T write field end error 4:lng: %s", p, err)
	}
	return err
}

func (p *LocationInfoRequest) writeField5(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("lat", thrift.DOUBLE, 5); err != nil {
		return fmt.Errorf("%T write field begin error 5:lat: %s", p, err)
	}
	if err := oprot.WriteDouble(float64(p.Lat)); err != nil {
		return fmt.Errorf("%T.lat (5) field write error: %s", p, err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return fmt.Errorf("%T write field end error 5:lat: %s", p, err)
	}
	return err
}

func (p *LocationInfoRequest) writeField6(oprot thrift.TProtocol) (err error) {
	if p.IsSetRadius() {
		if err := oprot.WriteFieldBegin("radius", thrift.I32, 6); err != nil {
			return fmt.Errorf("%T write field begin error 6:radius: %s", p, err)
		}
		if err := oprot.WriteI32(int32(*p.Radius)); err != nil {
			return fmt.Errorf("%T.radius (6) field write error: %s", p, err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return fmt.Errorf("%T write field end error 6:radius: %s", p, err)
		}
	}
	return err
}

func (p *LocationInfoRequest) writeField7(oprot thrift.TProtocol) (err error) {
	if p.IsSetMaxNum() {
		if err := oprot.WriteFieldBegin("max_num", thrift.I32, 7); err != nil {
			return fmt.Errorf("%T write field begin error 7:max_num: %s", p, err)
		}
		if err := oprot.WriteI32(int32(*p.MaxNum)); err != nil {
			return fmt.Errorf("%T.max_num (7) field write error: %s", p, err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return fmt.Errorf("%T write field end error 7:max_num: %s", p, err)
		}
	}
	return err
}

func (p *LocationInfoRequest) writeField8(oprot thrift.TProtocol) (err error) {
	if p.IsSetTraceid() {
		if err := oprot.WriteFieldBegin("traceid", thrift.STRING, 8); err != nil {
			return fmt.Errorf("%T write field begin error 8:traceid: %s", p, err)
		}
		if err := oprot.WriteString(string(*p.Traceid)); err != nil {
			return fmt.Errorf("%T.traceid (8) field write error: %s", p, err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return fmt.Errorf("%T write field end error 8:traceid: %s", p, err)
		}
	}
	return err
}

func (p *LocationInfoRequest) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("LocationInfoRequest(%+v)", *p)
}

type Result_ struct {
	Name string     `thrift:"name,1,required" json:"name"`
	Id   string     `thrift:"id,2,required" json:"id"`
	Kind ResultType `thrift:"kind,3,required" json:"kind"`
	Dist *float64   `thrift:"dist,4" json:"dist"`
}

func NewResult_() *Result_ {
	return &Result_{}
}

func (p *Result_) GetName() string {
	return p.Name
}

func (p *Result_) GetId() string {
	return p.Id
}

func (p *Result_) GetKind() ResultType {
	return p.Kind
}

var Result__Dist_DEFAULT float64

func (p *Result_) GetDist() float64 {
	if !p.IsSetDist() {
		return Result__Dist_DEFAULT
	}
	return *p.Dist
}
func (p *Result_) IsSetDist() bool {
	return p.Dist != nil
}

func (p *Result_) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return fmt.Errorf("%T read error: %s", p, err)
	}
	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return fmt.Errorf("%T field %d read error: %s", p, fieldId, err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if err := p.ReadField1(iprot); err != nil {
				return err
			}
		case 2:
			if err := p.ReadField2(iprot); err != nil {
				return err
			}
		case 3:
			if err := p.ReadField3(iprot); err != nil {
				return err
			}
		case 4:
			if err := p.ReadField4(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return fmt.Errorf("%T read struct end error: %s", p, err)
	}
	return nil
}

func (p *Result_) ReadField1(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return fmt.Errorf("error reading field 1: %s", err)
	} else {
		p.Name = v
	}
	return nil
}

func (p *Result_) ReadField2(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return fmt.Errorf("error reading field 2: %s", err)
	} else {
		p.Id = v
	}
	return nil
}

func (p *Result_) ReadField3(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI32(); err != nil {
		return fmt.Errorf("error reading field 3: %s", err)
	} else {
		temp := ResultType(v)
		p.Kind = temp
	}
	return nil
}

func (p *Result_) ReadField4(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadDouble(); err != nil {
		return fmt.Errorf("error reading field 4: %s", err)
	} else {
		p.Dist = &v
	}
	return nil
}

func (p *Result_) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("Result"); err != nil {
		return fmt.Errorf("%T write struct begin error: %s", p, err)
	}
	if err := p.writeField1(oprot); err != nil {
		return err
	}
	if err := p.writeField2(oprot); err != nil {
		return err
	}
	if err := p.writeField3(oprot); err != nil {
		return err
	}
	if err := p.writeField4(oprot); err != nil {
		return err
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return fmt.Errorf("write field stop error: %s", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return fmt.Errorf("write struct stop error: %s", err)
	}
	return nil
}

func (p *Result_) writeField1(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("name", thrift.STRING, 1); err != nil {
		return fmt.Errorf("%T write field begin error 1:name: %s", p, err)
	}
	if err := oprot.WriteString(string(p.Name)); err != nil {
		return fmt.Errorf("%T.name (1) field write error: %s", p, err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return fmt.Errorf("%T write field end error 1:name: %s", p, err)
	}
	return err
}

func (p *Result_) writeField2(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("id", thrift.STRING, 2); err != nil {
		return fmt.Errorf("%T write field begin error 2:id: %s", p, err)
	}
	if err := oprot.WriteString(string(p.Id)); err != nil {
		return fmt.Errorf("%T.id (2) field write error: %s", p, err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return fmt.Errorf("%T write field end error 2:id: %s", p, err)
	}
	return err
}

func (p *Result_) writeField3(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("kind", thrift.I32, 3); err != nil {
		return fmt.Errorf("%T write field begin error 3:kind: %s", p, err)
	}
	if err := oprot.WriteI32(int32(p.Kind)); err != nil {
		return fmt.Errorf("%T.kind (3) field write error: %s", p, err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return fmt.Errorf("%T write field end error 3:kind: %s", p, err)
	}
	return err
}

func (p *Result_) writeField4(oprot thrift.TProtocol) (err error) {
	if p.IsSetDist() {
		if err := oprot.WriteFieldBegin("dist", thrift.DOUBLE, 4); err != nil {
			return fmt.Errorf("%T write field begin error 4:dist: %s", p, err)
		}
		if err := oprot.WriteDouble(float64(*p.Dist)); err != nil {
			return fmt.Errorf("%T.dist (4) field write error: %s", p, err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return fmt.Errorf("%T write field end error 4:dist: %s", p, err)
		}
	}
	return err
}

func (p *Result_) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("Result_(%+v)", *p)
}

type LocationInfoResponse struct {
	Status   int32      `thrift:"status,1,required" json:"status"`
	Message  string     `thrift:"message,2,required" json:"message"`
	Time     int32      `thrift:"time,3,required" json:"time"`
	Area     int32      `thrift:"area,4,required" json:"area"`
	Country  string     `thrift:"country,5,required" json:"country"`
	Provice  string     `thrift:"provice,6,required" json:"provice"`
	City     string     `thrift:"city,7,required" json:"city"`
	District string     `thrift:"district,8,required" json:"district"`
	Result_  []*Result_ `thrift:"result,9,required" json:"result"`
}

func NewLocationInfoResponse() *LocationInfoResponse {
	return &LocationInfoResponse{}
}

func (p *LocationInfoResponse) GetStatus() int32 {
	return p.Status
}

func (p *LocationInfoResponse) GetMessage() string {
	return p.Message
}

func (p *LocationInfoResponse) GetTime() int32 {
	return p.Time
}

func (p *LocationInfoResponse) GetArea() int32 {
	return p.Area
}

func (p *LocationInfoResponse) GetCountry() string {
	return p.Country
}

func (p *LocationInfoResponse) GetProvice() string {
	return p.Provice
}

func (p *LocationInfoResponse) GetCity() string {
	return p.City
}

func (p *LocationInfoResponse) GetDistrict() string {
	return p.District
}

func (p *LocationInfoResponse) GetResult_() []*Result_ {
	return p.Result_
}
func (p *LocationInfoResponse) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return fmt.Errorf("%T read error: %s", p, err)
	}
	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return fmt.Errorf("%T field %d read error: %s", p, fieldId, err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if err := p.ReadField1(iprot); err != nil {
				return err
			}
		case 2:
			if err := p.ReadField2(iprot); err != nil {
				return err
			}
		case 3:
			if err := p.ReadField3(iprot); err != nil {
				return err
			}
		case 4:
			if err := p.ReadField4(iprot); err != nil {
				return err
			}
		case 5:
			if err := p.ReadField5(iprot); err != nil {
				return err
			}
		case 6:
			if err := p.ReadField6(iprot); err != nil {
				return err
			}
		case 7:
			if err := p.ReadField7(iprot); err != nil {
				return err
			}
		case 8:
			if err := p.ReadField8(iprot); err != nil {
				return err
			}
		case 9:
			if err := p.ReadField9(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return fmt.Errorf("%T read struct end error: %s", p, err)
	}
	return nil
}

func (p *LocationInfoResponse) ReadField1(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI32(); err != nil {
		return fmt.Errorf("error reading field 1: %s", err)
	} else {
		p.Status = v
	}
	return nil
}

func (p *LocationInfoResponse) ReadField2(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return fmt.Errorf("error reading field 2: %s", err)
	} else {
		p.Message = v
	}
	return nil
}

func (p *LocationInfoResponse) ReadField3(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI32(); err != nil {
		return fmt.Errorf("error reading field 3: %s", err)
	} else {
		p.Time = v
	}
	return nil
}

func (p *LocationInfoResponse) ReadField4(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI32(); err != nil {
		return fmt.Errorf("error reading field 4: %s", err)
	} else {
		p.Area = v
	}
	return nil
}

func (p *LocationInfoResponse) ReadField5(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return fmt.Errorf("error reading field 5: %s", err)
	} else {
		p.Country = v
	}
	return nil
}

func (p *LocationInfoResponse) ReadField6(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return fmt.Errorf("error reading field 6: %s", err)
	} else {
		p.Provice = v
	}
	return nil
}

func (p *LocationInfoResponse) ReadField7(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return fmt.Errorf("error reading field 7: %s", err)
	} else {
		p.City = v
	}
	return nil
}

func (p *LocationInfoResponse) ReadField8(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return fmt.Errorf("error reading field 8: %s", err)
	} else {
		p.District = v
	}
	return nil
}

func (p *LocationInfoResponse) ReadField9(iprot thrift.TProtocol) error {
	_, size, err := iprot.ReadListBegin()
	if err != nil {
		return fmt.Errorf("error reading list begin: %s", err)
	}
	tSlice := make([]*Result_, 0, size)
	p.Result_ = tSlice
	for i := 0; i < size; i++ {
		_elem0 := &Result_{}
		if err := _elem0.Read(iprot); err != nil {
			return fmt.Errorf("%T error reading struct: %s", _elem0, err)
		}
		p.Result_ = append(p.Result_, _elem0)
	}
	if err := iprot.ReadListEnd(); err != nil {
		return fmt.Errorf("error reading list end: %s", err)
	}
	return nil
}

func (p *LocationInfoResponse) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("LocationInfoResponse"); err != nil {
		return fmt.Errorf("%T write struct begin error: %s", p, err)
	}
	if err := p.writeField1(oprot); err != nil {
		return err
	}
	if err := p.writeField2(oprot); err != nil {
		return err
	}
	if err := p.writeField3(oprot); err != nil {
		return err
	}
	if err := p.writeField4(oprot); err != nil {
		return err
	}
	if err := p.writeField5(oprot); err != nil {
		return err
	}
	if err := p.writeField6(oprot); err != nil {
		return err
	}
	if err := p.writeField7(oprot); err != nil {
		return err
	}
	if err := p.writeField8(oprot); err != nil {
		return err
	}
	if err := p.writeField9(oprot); err != nil {
		return err
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return fmt.Errorf("write field stop error: %s", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return fmt.Errorf("write struct stop error: %s", err)
	}
	return nil
}

func (p *LocationInfoResponse) writeField1(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("status", thrift.I32, 1); err != nil {
		return fmt.Errorf("%T write field begin error 1:status: %s", p, err)
	}
	if err := oprot.WriteI32(int32(p.Status)); err != nil {
		return fmt.Errorf("%T.status (1) field write error: %s", p, err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return fmt.Errorf("%T write field end error 1:status: %s", p, err)
	}
	return err
}

func (p *LocationInfoResponse) writeField2(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("message", thrift.STRING, 2); err != nil {
		return fmt.Errorf("%T write field begin error 2:message: %s", p, err)
	}
	if err := oprot.WriteString(string(p.Message)); err != nil {
		return fmt.Errorf("%T.message (2) field write error: %s", p, err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return fmt.Errorf("%T write field end error 2:message: %s", p, err)
	}
	return err
}

func (p *LocationInfoResponse) writeField3(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("time", thrift.I32, 3); err != nil {
		return fmt.Errorf("%T write field begin error 3:time: %s", p, err)
	}
	if err := oprot.WriteI32(int32(p.Time)); err != nil {
		return fmt.Errorf("%T.time (3) field write error: %s", p, err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return fmt.Errorf("%T write field end error 3:time: %s", p, err)
	}
	return err
}

func (p *LocationInfoResponse) writeField4(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("area", thrift.I32, 4); err != nil {
		return fmt.Errorf("%T write field begin error 4:area: %s", p, err)
	}
	if err := oprot.WriteI32(int32(p.Area)); err != nil {
		return fmt.Errorf("%T.area (4) field write error: %s", p, err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return fmt.Errorf("%T write field end error 4:area: %s", p, err)
	}
	return err
}

func (p *LocationInfoResponse) writeField5(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("country", thrift.STRING, 5); err != nil {
		return fmt.Errorf("%T write field begin error 5:country: %s", p, err)
	}
	if err := oprot.WriteString(string(p.Country)); err != nil {
		return fmt.Errorf("%T.country (5) field write error: %s", p, err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return fmt.Errorf("%T write field end error 5:country: %s", p, err)
	}
	return err
}

func (p *LocationInfoResponse) writeField6(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("provice", thrift.STRING, 6); err != nil {
		return fmt.Errorf("%T write field begin error 6:provice: %s", p, err)
	}
	if err := oprot.WriteString(string(p.Provice)); err != nil {
		return fmt.Errorf("%T.provice (6) field write error: %s", p, err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return fmt.Errorf("%T write field end error 6:provice: %s", p, err)
	}
	return err
}

func (p *LocationInfoResponse) writeField7(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("city", thrift.STRING, 7); err != nil {
		return fmt.Errorf("%T write field begin error 7:city: %s", p, err)
	}
	if err := oprot.WriteString(string(p.City)); err != nil {
		return fmt.Errorf("%T.city (7) field write error: %s", p, err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return fmt.Errorf("%T write field end error 7:city: %s", p, err)
	}
	return err
}

func (p *LocationInfoResponse) writeField8(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("district", thrift.STRING, 8); err != nil {
		return fmt.Errorf("%T write field begin error 8:district: %s", p, err)
	}
	if err := oprot.WriteString(string(p.District)); err != nil {
		return fmt.Errorf("%T.district (8) field write error: %s", p, err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return fmt.Errorf("%T write field end error 8:district: %s", p, err)
	}
	return err
}

func (p *LocationInfoResponse) writeField9(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("result", thrift.LIST, 9); err != nil {
		return fmt.Errorf("%T write field begin error 9:result: %s", p, err)
	}
	if err := oprot.WriteListBegin(thrift.STRUCT, len(p.Result_)); err != nil {
		return fmt.Errorf("error writing list begin: %s", err)
	}
	for _, v := range p.Result_ {
		if err := v.Write(oprot); err != nil {
			return fmt.Errorf("%T error writing struct: %s", v, err)
		}
	}
	if err := oprot.WriteListEnd(); err != nil {
		return fmt.Errorf("error writing list end: %s", err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return fmt.Errorf("%T write field end error 9:result: %s", p, err)
	}
	return err
}

func (p *LocationInfoResponse) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("LocationInfoResponse(%+v)", *p)
}
